import { pipe } from "fp-ts/function";
import * as E from "fp-ts/lib/Either";
import { call, put, select, takeLatest } from "typed-redux-saga/macro";
import { getType } from "typesafe-actions";
import { InitializedProfile } from "..";
import { InitializedProfile as apiResponseProfile } from "../../../../definitions/backend/InitializedProfile";
// import { InitializedProfile } from "../../../../definitions/backend/InitializedProfile";
import { BackendClient } from "../../../api/backend";
import { apiUrlPrefix } from "../../../config";
import { authenticationSaga } from "../../../sagas/startup/authenticationSaga";
import { sessionTokenSelector } from "../../../store/reducers/authentication";
// import { SessionToken } from "../../../types/SessionToken";
import { SagaCallReturnType } from "../../../types/utils";
// import { profileLoadFailure, profileLoadSuccess } from "../actions";
import { convertUnknownToError } from "../../../utils/errors";
import {
  profileLoadFailure,
  profileLoadRequest,
  profileLoadSuccess
} from "../store";

type MyBackend = ReturnType<typeof BackendClient>;
function* saga() {
  const previousSessionToken: ReturnType<typeof sessionTokenSelector> =
    yield* select(sessionTokenSelector);

  const sessionToken: SagaCallReturnType<typeof authenticationSaga> =
    previousSessionToken
      ? previousSessionToken
      : yield* call(authenticationSaga);

  const backendClient: MyBackend = BackendClient(apiUrlPrefix, sessionToken);
  const getProfile = backendClient.getProfile;

  yield* takeLatest(getType(profileLoadRequest), loadProfile, getProfile); // pipes getProfile into loadProfile
}

// TODO || THIS is the main saga the middleware will run
// component dispatches custom saga action => saga action triggers store action

function* loadProfile(getProfile: MyBackend["getProfile"]) {
  yield* put(profileLoadRequest());
  const res = yield* call(getProfile, {});
  yield* put(
    pipe(
      res,
      E.fold(
        err => profileLoadFailure(convertUnknownToError(err)),
        res => {
          switch (res.status) {
            case 200:
              const newProfile = deriveUser(res);
              return profileLoadSuccess(newProfile);
            case 401:
              return profileLoadFailure(new Error("Unauthorized"));
            default:
              return profileLoadFailure(new Error("Something's wrong"));
          }
        }
      )
    )
  );
}

// autogenerated type either way
const deriveUser = (res: { value: apiResponseProfile }) => {
  const values = res.value;
  const newProfile: InitializedProfile = {
    name: values.name,
    nameSurname: `${values.name} ${values.family_name}`,
    familyName: values.family_name,
    fiscalCode: values.fiscal_code,
    email: values.email as `${string}@${string}.${string}`
  };
  return newProfile;
};

export default saga;
